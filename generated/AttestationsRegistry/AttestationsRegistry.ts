// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AttestationDeleted extends ethereum.Event {
  get params(): AttestationDeleted__Params {
    return new AttestationDeleted__Params(this);
  }
}

export class AttestationDeleted__Params {
  _event: AttestationDeleted;

  constructor(event: AttestationDeleted) {
    this._event = event;
  }

  get attestation(): AttestationDeletedAttestationStruct {
    return changetype<AttestationDeletedAttestationStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class AttestationDeletedAttestationStruct extends ethereum.Tuple {
  get collectionId(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get issuer(): Address {
    return this[2].toAddress();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get extraData(): Bytes {
    return this[5].toBytes();
  }
}

export class AttestationRecorded extends ethereum.Event {
  get params(): AttestationRecorded__Params {
    return new AttestationRecorded__Params(this);
  }
}

export class AttestationRecorded__Params {
  _event: AttestationRecorded;

  constructor(event: AttestationRecorded) {
    this._event = event;
  }

  get attestation(): AttestationRecordedAttestationStruct {
    return changetype<AttestationRecordedAttestationStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class AttestationRecordedAttestationStruct extends ethereum.Tuple {
  get collectionId(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get issuer(): Address {
    return this[2].toAddress();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get extraData(): Bytes {
    return this[5].toBytes();
  }
}

export class IssuerAuthorized extends ethereum.Event {
  get params(): IssuerAuthorized__Params {
    return new IssuerAuthorized__Params(this);
  }
}

export class IssuerAuthorized__Params {
  _event: IssuerAuthorized;

  constructor(event: IssuerAuthorized) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get firstCollectionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastCollectionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IssuerUnauthorized extends ethereum.Event {
  get params(): IssuerUnauthorized__Params {
    return new IssuerUnauthorized__Params(this);
  }
}

export class IssuerUnauthorized__Params {
  _event: IssuerUnauthorized;

  constructor(event: IssuerUnauthorized) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get firstCollectionId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastCollectionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AttestationsRegistry__getAttestationDataResultValue0Struct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get extraData(): Bytes {
    return this[3].toBytes();
  }
}

export class AttestationsRegistry__getAttestationDataBatchResultValue0Struct extends ethereum.Tuple {
  get issuer(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get timestamp(): BigInt {
    return this[2].toBigInt();
  }

  get extraData(): Bytes {
    return this[3].toBytes();
  }
}

export class AttestationsRegistry__getAttestationDataTupleResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Bytes;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBytes(this.value3));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): Bytes {
    return this.value3;
  }
}

export class AttestationsRegistry extends ethereum.SmartContract {
  static bind(address: Address): AttestationsRegistry {
    return new AttestationsRegistry("AttestationsRegistry", address);
  }

  getAttestationData(
    collectionId: BigInt,
    owner: Address
  ): AttestationsRegistry__getAttestationDataResultValue0Struct {
    let result = super.call(
      "getAttestationData",
      "getAttestationData(uint256,address):((address,uint256,uint32,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return changetype<
      AttestationsRegistry__getAttestationDataResultValue0Struct
    >(result[0].toTuple());
  }

  try_getAttestationData(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<
    AttestationsRegistry__getAttestationDataResultValue0Struct
  > {
    let result = super.tryCall(
      "getAttestationData",
      "getAttestationData(uint256,address):((address,uint256,uint32,bytes))",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AttestationsRegistry__getAttestationDataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAttestationDataBatch(
    collectionIds: Array<BigInt>,
    owners: Array<Address>
  ): Array<AttestationsRegistry__getAttestationDataBatchResultValue0Struct> {
    let result = super.call(
      "getAttestationDataBatch",
      "getAttestationDataBatch(uint256[],address[]):((address,uint256,uint32,bytes)[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(collectionIds),
        ethereum.Value.fromAddressArray(owners)
      ]
    );

    return result[0].toTupleArray<
      AttestationsRegistry__getAttestationDataBatchResultValue0Struct
    >();
  }

  try_getAttestationDataBatch(
    collectionIds: Array<BigInt>,
    owners: Array<Address>
  ): ethereum.CallResult<
    Array<AttestationsRegistry__getAttestationDataBatchResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAttestationDataBatch",
      "getAttestationDataBatch(uint256[],address[]):((address,uint256,uint32,bytes)[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(collectionIds),
        ethereum.Value.fromAddressArray(owners)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        AttestationsRegistry__getAttestationDataBatchResultValue0Struct
      >()
    );
  }

  getAttestationDataTuple(
    collectionId: BigInt,
    owner: Address
  ): AttestationsRegistry__getAttestationDataTupleResult {
    let result = super.call(
      "getAttestationDataTuple",
      "getAttestationDataTuple(uint256,address):(address,uint256,uint32,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return new AttestationsRegistry__getAttestationDataTupleResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBytes()
    );
  }

  try_getAttestationDataTuple(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<AttestationsRegistry__getAttestationDataTupleResult> {
    let result = super.tryCall(
      "getAttestationDataTuple",
      "getAttestationDataTuple(uint256,address):(address,uint256,uint32,bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AttestationsRegistry__getAttestationDataTupleResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBytes()
      )
    );
  }

  getAttestationExtraData(collectionId: BigInt, owner: Address): Bytes {
    let result = super.call(
      "getAttestationExtraData",
      "getAttestationExtraData(uint256,address):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBytes();
  }

  try_getAttestationExtraData(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getAttestationExtraData",
      "getAttestationExtraData(uint256,address):(bytes)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getAttestationIssuer(collectionId: BigInt, owner: Address): Address {
    let result = super.call(
      "getAttestationIssuer",
      "getAttestationIssuer(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toAddress();
  }

  try_getAttestationIssuer(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAttestationIssuer",
      "getAttestationIssuer(uint256,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAttestationTimestamp(collectionId: BigInt, owner: Address): BigInt {
    let result = super.call(
      "getAttestationTimestamp",
      "getAttestationTimestamp(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAttestationTimestamp(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAttestationTimestamp",
      "getAttestationTimestamp(uint256,address):(uint32)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAttestationValue(collectionId: BigInt, owner: Address): BigInt {
    let result = super.call(
      "getAttestationValue",
      "getAttestationValue(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAttestationValue(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAttestationValue",
      "getAttestationValue(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAttestationValueBatch(
    collectionIds: Array<BigInt>,
    owners: Array<Address>
  ): Array<BigInt> {
    let result = super.call(
      "getAttestationValueBatch",
      "getAttestationValueBatch(uint256[],address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(collectionIds),
        ethereum.Value.fromAddressArray(owners)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getAttestationValueBatch(
    collectionIds: Array<BigInt>,
    owners: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAttestationValueBatch",
      "getAttestationValueBatch(uint256[],address[]):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(collectionIds),
        ethereum.Value.fromAddressArray(owners)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  hasAttestation(collectionId: BigInt, owner: Address): boolean {
    let result = super.call(
      "hasAttestation",
      "hasAttestation(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return result[0].toBoolean();
  }

  try_hasAttestation(
    collectionId: BigInt,
    owner: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAttestation",
      "hasAttestation(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(collectionId),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAuthorized(issuer: Address, collectionId: BigInt): boolean {
    let result = super.call(
      "isAuthorized",
      "isAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(issuer),
        ethereum.Value.fromUnsignedBigInt(collectionId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAuthorized(
    issuer: Address,
    collectionId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorized",
      "isAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(issuer),
        ethereum.Value.fromUnsignedBigInt(collectionId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get badgesAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AuthorizeRangeCall extends ethereum.Call {
  get inputs(): AuthorizeRangeCall__Inputs {
    return new AuthorizeRangeCall__Inputs(this);
  }

  get outputs(): AuthorizeRangeCall__Outputs {
    return new AuthorizeRangeCall__Outputs(this);
  }
}

export class AuthorizeRangeCall__Inputs {
  _call: AuthorizeRangeCall;

  constructor(call: AuthorizeRangeCall) {
    this._call = call;
  }

  get issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get firstCollectionId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastCollectionId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AuthorizeRangeCall__Outputs {
  _call: AuthorizeRangeCall;

  constructor(call: AuthorizeRangeCall) {
    this._call = call;
  }
}

export class AuthorizeRangesCall extends ethereum.Call {
  get inputs(): AuthorizeRangesCall__Inputs {
    return new AuthorizeRangesCall__Inputs(this);
  }

  get outputs(): AuthorizeRangesCall__Outputs {
    return new AuthorizeRangesCall__Outputs(this);
  }
}

export class AuthorizeRangesCall__Inputs {
  _call: AuthorizeRangesCall;

  constructor(call: AuthorizeRangesCall) {
    this._call = call;
  }

  get issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ranges(): Array<AuthorizeRangesCallRangesStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      AuthorizeRangesCallRangesStruct
    >();
  }
}

export class AuthorizeRangesCall__Outputs {
  _call: AuthorizeRangesCall;

  constructor(call: AuthorizeRangesCall) {
    this._call = call;
  }
}

export class AuthorizeRangesCallRangesStruct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }
}

export class DeleteAttestationsCall extends ethereum.Call {
  get inputs(): DeleteAttestationsCall__Inputs {
    return new DeleteAttestationsCall__Inputs(this);
  }

  get outputs(): DeleteAttestationsCall__Outputs {
    return new DeleteAttestationsCall__Outputs(this);
  }
}

export class DeleteAttestationsCall__Inputs {
  _call: DeleteAttestationsCall;

  constructor(call: DeleteAttestationsCall) {
    this._call = call;
  }

  get owners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get collectionIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class DeleteAttestationsCall__Outputs {
  _call: DeleteAttestationsCall;

  constructor(call: DeleteAttestationsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecordAttestationsCall extends ethereum.Call {
  get inputs(): RecordAttestationsCall__Inputs {
    return new RecordAttestationsCall__Inputs(this);
  }

  get outputs(): RecordAttestationsCall__Outputs {
    return new RecordAttestationsCall__Outputs(this);
  }
}

export class RecordAttestationsCall__Inputs {
  _call: RecordAttestationsCall;

  constructor(call: RecordAttestationsCall) {
    this._call = call;
  }

  get attestations(): Array<RecordAttestationsCallAttestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      RecordAttestationsCallAttestationsStruct
    >();
  }
}

export class RecordAttestationsCall__Outputs {
  _call: RecordAttestationsCall;

  constructor(call: RecordAttestationsCall) {
    this._call = call;
  }
}

export class RecordAttestationsCallAttestationsStruct extends ethereum.Tuple {
  get collectionId(): BigInt {
    return this[0].toBigInt();
  }

  get owner(): Address {
    return this[1].toAddress();
  }

  get issuer(): Address {
    return this[2].toAddress();
  }

  get value(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get extraData(): Bytes {
    return this[5].toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnauthorizeRangeCall extends ethereum.Call {
  get inputs(): UnauthorizeRangeCall__Inputs {
    return new UnauthorizeRangeCall__Inputs(this);
  }

  get outputs(): UnauthorizeRangeCall__Outputs {
    return new UnauthorizeRangeCall__Outputs(this);
  }
}

export class UnauthorizeRangeCall__Inputs {
  _call: UnauthorizeRangeCall;

  constructor(call: UnauthorizeRangeCall) {
    this._call = call;
  }

  get issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rangeIndex(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get firstCollectionId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get lastCollectionId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UnauthorizeRangeCall__Outputs {
  _call: UnauthorizeRangeCall;

  constructor(call: UnauthorizeRangeCall) {
    this._call = call;
  }
}

export class UnauthorizeRangesCall extends ethereum.Call {
  get inputs(): UnauthorizeRangesCall__Inputs {
    return new UnauthorizeRangesCall__Inputs(this);
  }

  get outputs(): UnauthorizeRangesCall__Outputs {
    return new UnauthorizeRangesCall__Outputs(this);
  }
}

export class UnauthorizeRangesCall__Inputs {
  _call: UnauthorizeRangesCall;

  constructor(call: UnauthorizeRangesCall) {
    this._call = call;
  }

  get issuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ranges(): Array<UnauthorizeRangesCallRangesStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      UnauthorizeRangesCallRangesStruct
    >();
  }

  get rangeIndexes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class UnauthorizeRangesCall__Outputs {
  _call: UnauthorizeRangesCall;

  constructor(call: UnauthorizeRangesCall) {
    this._call = call;
  }
}

export class UnauthorizeRangesCallRangesStruct extends ethereum.Tuple {
  get min(): BigInt {
    return this[0].toBigInt();
  }

  get max(): BigInt {
    return this[1].toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
